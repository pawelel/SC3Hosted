@page "/register"
@inject IAuthService _authService
@inject NavigationManager _navMan

<PageTitle>Register</PageTitle>

<h1>Register</h1>

@if (_showErrors)
{
    <div class="alert alert-danger" role="alert">
        @if (_errors != null)
        {
            foreach (var error in _errors)
            {
                <p>@error</p>
            }
        }
    </div>
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Please enter your details</h5>
        <EditForm Model="@_registerModel" OnValidSubmit="@HandleRegistration">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <div class="form-group">
                <label for="email">Email address</label>
                <InputText Id="email" Class="form-control" @bind-Value="@_registerModel.Email"/>
                <ValidationMessage For="@(() => _registerModel.Email)"/>
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText type="password" Id="password" Class="form-control" @bind-Value="@_registerModel.Password"/>
                <ValidationMessage For="@(() => _registerModel.Password)"/>
            </div>
            <div class="form-group">
                <label for="confirm-password">Confirm Password</label>
                <InputText type="password" Id="confirm-password" Class="form-control" @bind-Value="@_registerModel.ConfirmPassword"/>
                <ValidationMessage For="@(() => _registerModel.ConfirmPassword)"/>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>
</div>

@code {

    private RegisterDto _registerModel = new();
    private bool _showErrors;
    private IEnumerable<string> _errors = new List<string>();

    private async Task HandleRegistration()
    {
        _showErrors = false;

        var result = await _authService.Register(_registerModel);

        if (result.Successful)
        {
            _navMan.NavigateTo("/login");
        }
        else
        {
            _errors = result.Errors;
            _showErrors = true;
        }
    }
}